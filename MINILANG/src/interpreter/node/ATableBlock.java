/* This file was generated by SableCC (http://www.sablecc.org/). */

package interpreter.node;

import java.util.*;
import interpreter.analysis.*;

@SuppressWarnings("nls")
public final class ATableBlock extends PBlock
{
    private TLBrk _lBrk_;
    private TTable _table_;
    private TRBrk _rBrk_;
    private final LinkedList<PTableRow> _items_ = new LinkedList<PTableRow>();

    public ATableBlock()
    {
        // Constructor
    }

    public ATableBlock(
        @SuppressWarnings("hiding") TLBrk _lBrk_,
        @SuppressWarnings("hiding") TTable _table_,
        @SuppressWarnings("hiding") TRBrk _rBrk_,
        @SuppressWarnings("hiding") List<?> _items_)
    {
        // Constructor
        setLBrk(_lBrk_);

        setTable(_table_);

        setRBrk(_rBrk_);

        setItems(_items_);

    }

    @Override
    public Object clone()
    {
        return new ATableBlock(
            cloneNode(this._lBrk_),
            cloneNode(this._table_),
            cloneNode(this._rBrk_),
            cloneList(this._items_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATableBlock(this);
    }

    public TLBrk getLBrk()
    {
        return this._lBrk_;
    }

    public void setLBrk(TLBrk node)
    {
        if(this._lBrk_ != null)
        {
            this._lBrk_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBrk_ = node;
    }

    public TTable getTable()
    {
        return this._table_;
    }

    public void setTable(TTable node)
    {
        if(this._table_ != null)
        {
            this._table_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._table_ = node;
    }

    public TRBrk getRBrk()
    {
        return this._rBrk_;
    }

    public void setRBrk(TRBrk node)
    {
        if(this._rBrk_ != null)
        {
            this._rBrk_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBrk_ = node;
    }

    public LinkedList<PTableRow> getItems()
    {
        return this._items_;
    }

    public void setItems(List<?> list)
    {
        for(PTableRow e : this._items_)
        {
            e.parent(null);
        }
        this._items_.clear();

        for(Object obj_e : list)
        {
            PTableRow e = (PTableRow) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._items_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lBrk_)
            + toString(this._table_)
            + toString(this._rBrk_)
            + toString(this._items_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lBrk_ == child)
        {
            this._lBrk_ = null;
            return;
        }

        if(this._table_ == child)
        {
            this._table_ = null;
            return;
        }

        if(this._rBrk_ == child)
        {
            this._rBrk_ = null;
            return;
        }

        if(this._items_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lBrk_ == oldChild)
        {
            setLBrk((TLBrk) newChild);
            return;
        }

        if(this._table_ == oldChild)
        {
            setTable((TTable) newChild);
            return;
        }

        if(this._rBrk_ == oldChild)
        {
            setRBrk((TRBrk) newChild);
            return;
        }

        for(ListIterator<PTableRow> i = this._items_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PTableRow) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
