/* This file was generated by SableCC (http://www.sablecc.org/). */

package interpreter.node;

import interpreter.analysis.*;

@SuppressWarnings("nls")
public final class AListItem extends PListItem
{
    private TDash _dash_;
    private PInline _inlines_;

    public AListItem()
    {
        // Constructor
    }

    public AListItem(
        @SuppressWarnings("hiding") TDash _dash_,
        @SuppressWarnings("hiding") PInline _inlines_)
    {
        // Constructor
        setDash(_dash_);

        setInlines(_inlines_);

    }

    @Override
    public Object clone()
    {
        return new AListItem(
            cloneNode(this._dash_),
            cloneNode(this._inlines_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListItem(this);
    }

    public TDash getDash()
    {
        return this._dash_;
    }

    public void setDash(TDash node)
    {
        if(this._dash_ != null)
        {
            this._dash_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dash_ = node;
    }

    public PInline getInlines()
    {
        return this._inlines_;
    }

    public void setInlines(PInline node)
    {
        if(this._inlines_ != null)
        {
            this._inlines_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._inlines_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._dash_)
            + toString(this._inlines_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._dash_ == child)
        {
            this._dash_ = null;
            return;
        }

        if(this._inlines_ == child)
        {
            this._inlines_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._dash_ == oldChild)
        {
            setDash((TDash) newChild);
            return;
        }

        if(this._inlines_ == oldChild)
        {
            setInlines((PInline) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
