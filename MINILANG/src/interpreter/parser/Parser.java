/* This file was generated by SableCC (http://www.sablecc.org/). */

package interpreter.parser;

import interpreter.lexer.*;
import interpreter.node.*;
import interpreter.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PDocument node1 = (PDocument) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAdocument1Document */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAdocument2Document */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AAuthorBlock */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce ATitleBlock */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce ADateBlock */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list, false);
            }
            break;
            case 5: /* reduce AFontSizeBlock */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list, false);
            }
            break;
            case 6: /* reduce ABoldBlock */
            {
                ArrayList<Object> list = new6();
                push(goTo(1), list, false);
            }
            break;
            case 7: /* reduce AItalicBlock */
            {
                ArrayList<Object> list = new7();
                push(goTo(1), list, false);
            }
            break;
            case 8: /* reduce AImageBlock */
            {
                ArrayList<Object> list = new8();
                push(goTo(1), list, false);
            }
            break;
            case 9: /* reduce ALinkBlock */
            {
                ArrayList<Object> list = new9();
                push(goTo(1), list, false);
            }
            break;
            case 10: /* reduce AEmailBlock */
            {
                ArrayList<Object> list = new10();
                push(goTo(1), list, false);
            }
            break;
            case 11: /* reduce AParaBlock */
            {
                ArrayList<Object> list = new11();
                push(goTo(1), list, false);
            }
            break;
            case 12: /* reduce AListBlock */
            {
                ArrayList<Object> list = new12();
                push(goTo(1), list, false);
            }
            break;
            case 13: /* reduce ATableBlock */
            {
                ArrayList<Object> list = new13();
                push(goTo(1), list, false);
            }
            break;
            case 14: /* reduce AListItem */
            {
                ArrayList<Object> list = new14();
                push(goTo(2), list, false);
            }
            break;
            case 15: /* reduce ATableRow */
            {
                ArrayList<Object> list = new15();
                push(goTo(3), list, false);
            }
            break;
            case 16: /* reduce ATdTableItem */
            {
                ArrayList<Object> list = new16();
                push(goTo(4), list, false);
            }
            break;
            case 17: /* reduce AThTableItem */
            {
                ArrayList<Object> list = new17();
                push(goTo(4), list, false);
            }
            break;
            case 18: /* reduce ATerminalInline */
            {
                ArrayList<Object> list = new18();
                push(goTo(5), list, false);
            }
            break;
            case 19: /* reduce AAuthorInline */
            {
                ArrayList<Object> list = new19();
                push(goTo(5), list, false);
            }
            break;
            case 20: /* reduce ATitleInline */
            {
                ArrayList<Object> list = new20();
                push(goTo(5), list, false);
            }
            break;
            case 21: /* reduce ADateInline */
            {
                ArrayList<Object> list = new21();
                push(goTo(5), list, false);
            }
            break;
            case 22: /* reduce AEmailInline */
            {
                ArrayList<Object> list = new22();
                push(goTo(5), list, false);
            }
            break;
            case 23: /* reduce AImageInline */
            {
                ArrayList<Object> list = new23();
                push(goTo(5), list, false);
            }
            break;
            case 24: /* reduce ALinkInline */
            {
                ArrayList<Object> list = new24();
                push(goTo(5), list, false);
            }
            break;
            case 25: /* reduce ABoldInline */
            {
                ArrayList<Object> list = new25();
                push(goTo(5), list, false);
            }
            break;
            case 26: /* reduce AItalicInline */
            {
                ArrayList<Object> list = new26();
                push(goTo(5), list, false);
            }
            break;
            case 27: /* reduce AFontSizeInline */
            {
                ArrayList<Object> list = new27();
                push(goTo(5), list, false);
            }
            break;
            case 28: /* reduce APlainTextTerminal */
            {
                ArrayList<Object> list = new28();
                push(goTo(6), list, false);
            }
            break;
            case 29: /* reduce AInlineTerminal */
            {
                ArrayList<Object> list = new29();
                push(goTo(6), list, false);
            }
            break;
            case 30: /* reduce ATerminal$Block */
            {
                ArrayList<Object> list = new30();
                push(goTo(7), list, true);
            }
            break;
            case 31: /* reduce ANonTerminal$Block */
            {
                ArrayList<Object> list = new31();
                push(goTo(7), list, true);
            }
            break;
            case 32: /* reduce ATerminal$Inline */
            {
                ArrayList<Object> list = new32();
                push(goTo(8), list, true);
            }
            break;
            case 33: /* reduce ANonTerminal$Inline */
            {
                ArrayList<Object> list = new33();
                push(goTo(8), list, true);
            }
            break;
            case 34: /* reduce ATerminal$ListItem */
            {
                ArrayList<Object> list = new34();
                push(goTo(9), list, true);
            }
            break;
            case 35: /* reduce ANonTerminal$ListItem */
            {
                ArrayList<Object> list = new35();
                push(goTo(9), list, true);
            }
            break;
            case 36: /* reduce ATerminal$TableRow */
            {
                ArrayList<Object> list = new36();
                push(goTo(10), list, true);
            }
            break;
            case 37: /* reduce ANonTerminal$TableRow */
            {
                ArrayList<Object> list = new37();
                push(goTo(10), list, true);
            }
            break;
            case 38: /* reduce ATerminal$TableItem */
            {
                ArrayList<Object> list = new38();
                push(goTo(11), list, true);
            }
            break;
            case 39: /* reduce ANonTerminal$TableItem */
            {
                ArrayList<Object> list = new39();
                push(goTo(11), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAdocument1Document */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PDocument pdocumentNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pdocumentNode1 = new ADocument(listNode2);
        }
	nodeList.add(pdocumentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAdocument2Document */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDocument pdocumentNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pdocumentNode1 = new ADocument(listNode3);
        }
	nodeList.add(pdocumentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAuthorBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrk tlbrkNode2;
        TAuthor tauthorNode3;
        TRBrk trbrkNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tlbrkNode2 = (TLBrk)nodeArrayList1.get(0);
        tauthorNode3 = (TAuthor)nodeArrayList2.get(0);
        trbrkNode4 = (TRBrk)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pblockNode1 = new AAuthorBlock(tlbrkNode2, tauthorNode3, trbrkNode4, listNode6);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ATitleBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrk tlbrkNode2;
        TTitle ttitleNode3;
        TRBrk trbrkNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tlbrkNode2 = (TLBrk)nodeArrayList1.get(0);
        ttitleNode3 = (TTitle)nodeArrayList2.get(0);
        trbrkNode4 = (TRBrk)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pblockNode1 = new ATitleBlock(tlbrkNode2, ttitleNode3, trbrkNode4, listNode6);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ADateBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrk tlbrkNode2;
        TDate tdateNode3;
        TRBrk trbrkNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tlbrkNode2 = (TLBrk)nodeArrayList1.get(0);
        tdateNode3 = (TDate)nodeArrayList2.get(0);
        trbrkNode4 = (TRBrk)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pblockNode1 = new ADateBlock(tlbrkNode2, tdateNode3, trbrkNode4, listNode6);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AFontSizeBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrk tlbrkNode2;
        TFontSize tfontsizeNode3;
        TRBrk trbrkNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tlbrkNode2 = (TLBrk)nodeArrayList1.get(0);
        tfontsizeNode3 = (TFontSize)nodeArrayList2.get(0);
        trbrkNode4 = (TRBrk)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pblockNode1 = new AFontSizeBlock(tlbrkNode2, tfontsizeNode3, trbrkNode4, listNode6);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ABoldBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrk tlbrkNode2;
        TBold tboldNode3;
        TRBrk trbrkNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tlbrkNode2 = (TLBrk)nodeArrayList1.get(0);
        tboldNode3 = (TBold)nodeArrayList2.get(0);
        trbrkNode4 = (TRBrk)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pblockNode1 = new ABoldBlock(tlbrkNode2, tboldNode3, trbrkNode4, listNode6);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AItalicBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrk tlbrkNode2;
        TItalic titalicNode3;
        TRBrk trbrkNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tlbrkNode2 = (TLBrk)nodeArrayList1.get(0);
        titalicNode3 = (TItalic)nodeArrayList2.get(0);
        trbrkNode4 = (TRBrk)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pblockNode1 = new AItalicBlock(tlbrkNode2, titalicNode3, trbrkNode4, listNode6);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AImageBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrk tlbrkNode2;
        TImage timageNode3;
        TRBrk trbrkNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tlbrkNode2 = (TLBrk)nodeArrayList1.get(0);
        timageNode3 = (TImage)nodeArrayList2.get(0);
        trbrkNode4 = (TRBrk)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pblockNode1 = new AImageBlock(tlbrkNode2, timageNode3, trbrkNode4, listNode6);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ALinkBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrk tlbrkNode2;
        TLink tlinkNode3;
        TRBrk trbrkNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tlbrkNode2 = (TLBrk)nodeArrayList1.get(0);
        tlinkNode3 = (TLink)nodeArrayList2.get(0);
        trbrkNode4 = (TRBrk)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pblockNode1 = new ALinkBlock(tlbrkNode2, tlinkNode3, trbrkNode4, listNode6);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AEmailBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrk tlbrkNode2;
        TEmail temailNode3;
        TRBrk trbrkNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tlbrkNode2 = (TLBrk)nodeArrayList1.get(0);
        temailNode3 = (TEmail)nodeArrayList2.get(0);
        trbrkNode4 = (TRBrk)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pblockNode1 = new AEmailBlock(tlbrkNode2, temailNode3, trbrkNode4, listNode6);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AParaBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrk tlbrkNode2;
        TPara tparaNode3;
        TRBrk trbrkNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tlbrkNode2 = (TLBrk)nodeArrayList1.get(0);
        tparaNode3 = (TPara)nodeArrayList2.get(0);
        trbrkNode4 = (TRBrk)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pblockNode1 = new AParaBlock(tlbrkNode2, tparaNode3, trbrkNode4, listNode6);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AListBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrk tlbrkNode2;
        TList tlistNode3;
        TRBrk trbrkNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tlbrkNode2 = (TLBrk)nodeArrayList1.get(0);
        tlistNode3 = (TList)nodeArrayList2.get(0);
        trbrkNode4 = (TRBrk)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pblockNode1 = new AListBlock(tlbrkNode2, tlistNode3, trbrkNode4, listNode6);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ATableBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrk tlbrkNode2;
        TTable ttableNode3;
        TRBrk trbrkNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tlbrkNode2 = (TLBrk)nodeArrayList1.get(0);
        ttableNode3 = (TTable)nodeArrayList2.get(0);
        trbrkNode4 = (TRBrk)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pblockNode1 = new ATableBlock(tlbrkNode2, ttableNode3, trbrkNode4, listNode6);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AListItem */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListItem plistitemNode1;
        {
            // Block
        TDash tdashNode2;
        PInline pinlineNode3;
        tdashNode2 = (TDash)nodeArrayList1.get(0);
        pinlineNode3 = (PInline)nodeArrayList2.get(0);

        plistitemNode1 = new AListItem(tdashNode2, pinlineNode3);
        }
	nodeList.add(plistitemNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ATableRow */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTableRow ptablerowNode1;
        {
            // Block
        TTilde ttildeNode2;
        TTr ttrNode3;
        TLPar tlparNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TRPar trparNode7;
        ttildeNode2 = (TTilde)nodeArrayList1.get(0);
        ttrNode3 = (TTr)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        trparNode7 = (TRPar)nodeArrayList5.get(0);

        ptablerowNode1 = new ATableRow(ttildeNode2, ttrNode3, tlparNode4, listNode6, trparNode7);
        }
	nodeList.add(ptablerowNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ATdTableItem */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTableItem ptableitemNode1;
        {
            // Block
        TTilde ttildeNode2;
        TTd ttdNode3;
        PTerminal pterminalNode4;
        ttildeNode2 = (TTilde)nodeArrayList1.get(0);
        ttdNode3 = (TTd)nodeArrayList2.get(0);
        pterminalNode4 = (PTerminal)nodeArrayList3.get(0);

        ptableitemNode1 = new ATdTableItem(ttildeNode2, ttdNode3, pterminalNode4);
        }
	nodeList.add(ptableitemNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AThTableItem */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTableItem ptableitemNode1;
        {
            // Block
        TTilde ttildeNode2;
        TTh tthNode3;
        PTerminal pterminalNode4;
        ttildeNode2 = (TTilde)nodeArrayList1.get(0);
        tthNode3 = (TTh)nodeArrayList2.get(0);
        pterminalNode4 = (PTerminal)nodeArrayList3.get(0);

        ptableitemNode1 = new AThTableItem(ttildeNode2, tthNode3, pterminalNode4);
        }
	nodeList.add(ptableitemNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ATerminalInline */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInline pinlineNode1;
        {
            // Block
        PTerminal pterminalNode2;
        pterminalNode2 = (PTerminal)nodeArrayList1.get(0);

        pinlineNode1 = new ATerminalInline(pterminalNode2);
        }
	nodeList.add(pinlineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAuthorInline */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInline pinlineNode1;
        {
            // Block
        TTilde ttildeNode2;
        TAuthor tauthorNode3;
        PTerminal pterminalNode4;
        ttildeNode2 = (TTilde)nodeArrayList1.get(0);
        tauthorNode3 = (TAuthor)nodeArrayList2.get(0);
        pterminalNode4 = (PTerminal)nodeArrayList3.get(0);

        pinlineNode1 = new AAuthorInline(ttildeNode2, tauthorNode3, pterminalNode4);
        }
	nodeList.add(pinlineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ATitleInline */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInline pinlineNode1;
        {
            // Block
        TTilde ttildeNode2;
        TTitle ttitleNode3;
        PTerminal pterminalNode4;
        ttildeNode2 = (TTilde)nodeArrayList1.get(0);
        ttitleNode3 = (TTitle)nodeArrayList2.get(0);
        pterminalNode4 = (PTerminal)nodeArrayList3.get(0);

        pinlineNode1 = new ATitleInline(ttildeNode2, ttitleNode3, pterminalNode4);
        }
	nodeList.add(pinlineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ADateInline */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInline pinlineNode1;
        {
            // Block
        TTilde ttildeNode2;
        TDate tdateNode3;
        PTerminal pterminalNode4;
        ttildeNode2 = (TTilde)nodeArrayList1.get(0);
        tdateNode3 = (TDate)nodeArrayList2.get(0);
        pterminalNode4 = (PTerminal)nodeArrayList3.get(0);

        pinlineNode1 = new ADateInline(ttildeNode2, tdateNode3, pterminalNode4);
        }
	nodeList.add(pinlineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AEmailInline */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInline pinlineNode1;
        {
            // Block
        TTilde ttildeNode2;
        TEmail temailNode3;
        PTerminal pterminalNode4;
        ttildeNode2 = (TTilde)nodeArrayList1.get(0);
        temailNode3 = (TEmail)nodeArrayList2.get(0);
        pterminalNode4 = (PTerminal)nodeArrayList3.get(0);

        pinlineNode1 = new AEmailInline(ttildeNode2, temailNode3, pterminalNode4);
        }
	nodeList.add(pinlineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AImageInline */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInline pinlineNode1;
        {
            // Block
        TTilde ttildeNode2;
        TImage timageNode3;
        PTerminal pterminalNode4;
        ttildeNode2 = (TTilde)nodeArrayList1.get(0);
        timageNode3 = (TImage)nodeArrayList2.get(0);
        pterminalNode4 = (PTerminal)nodeArrayList3.get(0);

        pinlineNode1 = new AImageInline(ttildeNode2, timageNode3, pterminalNode4);
        }
	nodeList.add(pinlineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ALinkInline */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInline pinlineNode1;
        {
            // Block
        TTilde ttildeNode2;
        TLink tlinkNode3;
        PTerminal pterminalNode4;
        ttildeNode2 = (TTilde)nodeArrayList1.get(0);
        tlinkNode3 = (TLink)nodeArrayList2.get(0);
        pterminalNode4 = (PTerminal)nodeArrayList3.get(0);

        pinlineNode1 = new ALinkInline(ttildeNode2, tlinkNode3, pterminalNode4);
        }
	nodeList.add(pinlineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ABoldInline */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInline pinlineNode1;
        {
            // Block
        TTilde ttildeNode2;
        TBold tboldNode3;
        PTerminal pterminalNode4;
        ttildeNode2 = (TTilde)nodeArrayList1.get(0);
        tboldNode3 = (TBold)nodeArrayList2.get(0);
        pterminalNode4 = (PTerminal)nodeArrayList3.get(0);

        pinlineNode1 = new ABoldInline(ttildeNode2, tboldNode3, pterminalNode4);
        }
	nodeList.add(pinlineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AItalicInline */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInline pinlineNode1;
        {
            // Block
        TTilde ttildeNode2;
        TItalic titalicNode3;
        PTerminal pterminalNode4;
        ttildeNode2 = (TTilde)nodeArrayList1.get(0);
        titalicNode3 = (TItalic)nodeArrayList2.get(0);
        pterminalNode4 = (PTerminal)nodeArrayList3.get(0);

        pinlineNode1 = new AItalicInline(ttildeNode2, titalicNode3, pterminalNode4);
        }
	nodeList.add(pinlineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AFontSizeInline */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInline pinlineNode1;
        {
            // Block
        TTilde ttildeNode2;
        TFontSize tfontsizeNode3;
        PTerminal pterminalNode4;
        ttildeNode2 = (TTilde)nodeArrayList1.get(0);
        tfontsizeNode3 = (TFontSize)nodeArrayList2.get(0);
        pterminalNode4 = (PTerminal)nodeArrayList3.get(0);

        pinlineNode1 = new AFontSizeInline(ttildeNode2, tfontsizeNode3, pterminalNode4);
        }
	nodeList.add(pinlineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce APlainTextTerminal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerminal pterminalNode1;
        {
            // Block
        TPlainText tplaintextNode2;
        tplaintextNode2 = (TPlainText)nodeArrayList1.get(0);

        pterminalNode1 = new APlainTextTerminal(tplaintextNode2);
        }
	nodeList.add(pterminalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AInlineTerminal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerminal pterminalNode1;
        {
            // Block
        TLPar tlparNode2;
        PInline pinlineNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pinlineNode3 = (PInline)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pterminalNode1 = new AInlineTerminal(tlparNode2, pinlineNode3, trparNode4);
        }
	nodeList.add(pterminalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ATerminal$Block */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PBlock pblockNode1;
        pblockNode1 = (PBlock)nodeArrayList1.get(0);
	if(pblockNode1 != null)
	{
	  listNode2.add(pblockNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ANonTerminal$Block */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PBlock pblockNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pblockNode2 = (PBlock)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pblockNode2 != null)
	{
	  listNode3.add(pblockNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ATerminal$Inline */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PInline pinlineNode1;
        pinlineNode1 = (PInline)nodeArrayList1.get(0);
	if(pinlineNode1 != null)
	{
	  listNode2.add(pinlineNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ANonTerminal$Inline */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PInline pinlineNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pinlineNode2 = (PInline)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pinlineNode2 != null)
	{
	  listNode3.add(pinlineNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ATerminal$ListItem */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PListItem plistitemNode1;
        plistitemNode1 = (PListItem)nodeArrayList1.get(0);
	if(plistitemNode1 != null)
	{
	  listNode2.add(plistitemNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ANonTerminal$ListItem */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PListItem plistitemNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plistitemNode2 = (PListItem)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plistitemNode2 != null)
	{
	  listNode3.add(plistitemNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ATerminal$TableRow */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PTableRow ptablerowNode1;
        ptablerowNode1 = (PTableRow)nodeArrayList1.get(0);
	if(ptablerowNode1 != null)
	{
	  listNode2.add(ptablerowNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ANonTerminal$TableRow */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PTableRow ptablerowNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        ptablerowNode2 = (PTableRow)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ptablerowNode2 != null)
	{
	  listNode3.add(ptablerowNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ATerminal$TableItem */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PTableItem ptableitemNode1;
        ptableitemNode1 = (PTableItem)nodeArrayList1.get(0);
	if(ptableitemNode1 != null)
	{
	  listNode2.add(ptableitemNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ANonTerminal$TableItem */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PTableItem ptableitemNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        ptableitemNode2 = (PTableItem)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ptableitemNode2 != null)
	{
	  listNode3.add(ptableitemNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {2, SHIFT, 1}, },
			{{-1, ERROR, 1}, {6, SHIFT, 5}, {7, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 8}, {10, SHIFT, 9}, {11, SHIFT, 10}, {12, SHIFT, 11}, {13, SHIFT, 12}, {14, SHIFT, 13}, {15, SHIFT, 14}, {16, SHIFT, 15}, {17, SHIFT, 16}, },
			{{-1, ERROR, 2}, {22, ACCEPT, -1}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 1}, {2, SHIFT, 1}, },
			{{-1, ERROR, 5}, {3, SHIFT, 18}, },
			{{-1, ERROR, 6}, {3, SHIFT, 19}, },
			{{-1, ERROR, 7}, {3, SHIFT, 20}, },
			{{-1, ERROR, 8}, {3, SHIFT, 21}, },
			{{-1, ERROR, 9}, {3, SHIFT, 22}, },
			{{-1, ERROR, 10}, {3, SHIFT, 23}, },
			{{-1, ERROR, 11}, {3, SHIFT, 24}, },
			{{-1, ERROR, 12}, {3, SHIFT, 25}, },
			{{-1, ERROR, 13}, {3, SHIFT, 26}, },
			{{-1, ERROR, 14}, {3, SHIFT, 27}, },
			{{-1, ERROR, 15}, {3, SHIFT, 28}, },
			{{-1, ERROR, 16}, {3, SHIFT, 29}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 18}, {0, SHIFT, 30}, {5, SHIFT, 31}, {21, SHIFT, 32}, },
			{{-1, ERROR, 19}, {0, SHIFT, 30}, {5, SHIFT, 31}, {21, SHIFT, 32}, },
			{{-1, ERROR, 20}, {0, SHIFT, 30}, {5, SHIFT, 31}, {21, SHIFT, 32}, },
			{{-1, ERROR, 21}, {0, SHIFT, 30}, {5, SHIFT, 31}, {21, SHIFT, 32}, },
			{{-1, ERROR, 22}, {0, SHIFT, 30}, {5, SHIFT, 31}, {21, SHIFT, 32}, },
			{{-1, ERROR, 23}, {0, SHIFT, 30}, {5, SHIFT, 31}, {21, SHIFT, 32}, },
			{{-1, ERROR, 24}, {0, SHIFT, 30}, {5, SHIFT, 31}, {21, SHIFT, 32}, },
			{{-1, ERROR, 25}, {0, SHIFT, 30}, {5, SHIFT, 31}, {21, SHIFT, 32}, },
			{{-1, ERROR, 26}, {0, SHIFT, 30}, {5, SHIFT, 31}, {21, SHIFT, 32}, },
			{{-1, ERROR, 27}, {4, SHIFT, 44}, },
			{{-1, ERROR, 28}, {5, SHIFT, 47}, },
			{{-1, ERROR, 29}, {0, SHIFT, 30}, {5, SHIFT, 31}, {21, SHIFT, 32}, },
			{{-1, ERROR, 30}, {0, SHIFT, 30}, {5, SHIFT, 31}, {21, SHIFT, 32}, },
			{{-1, ERROR, 31}, {6, SHIFT, 52}, {7, SHIFT, 53}, {8, SHIFT, 54}, {9, SHIFT, 55}, {10, SHIFT, 56}, {11, SHIFT, 57}, {12, SHIFT, 58}, {13, SHIFT, 59}, {17, SHIFT, 60}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 2}, {0, SHIFT, 30}, {5, SHIFT, 31}, {21, SHIFT, 32}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 30}, {5, SHIFT, 31}, {21, SHIFT, 32}, },
			{{-1, REDUCE, 4}, {0, SHIFT, 30}, {5, SHIFT, 31}, {21, SHIFT, 32}, },
			{{-1, REDUCE, 8}, {0, SHIFT, 30}, {5, SHIFT, 31}, {21, SHIFT, 32}, },
			{{-1, REDUCE, 9}, {0, SHIFT, 30}, {5, SHIFT, 31}, {21, SHIFT, 32}, },
			{{-1, REDUCE, 6}, {0, SHIFT, 30}, {5, SHIFT, 31}, {21, SHIFT, 32}, },
			{{-1, REDUCE, 7}, {0, SHIFT, 30}, {5, SHIFT, 31}, {21, SHIFT, 32}, },
			{{-1, REDUCE, 10}, {0, SHIFT, 30}, {5, SHIFT, 31}, {21, SHIFT, 32}, },
			{{-1, REDUCE, 11}, {0, SHIFT, 30}, {5, SHIFT, 31}, {21, SHIFT, 32}, },
			{{-1, ERROR, 44}, {0, SHIFT, 30}, {5, SHIFT, 31}, {21, SHIFT, 32}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 12}, {4, SHIFT, 44}, },
			{{-1, ERROR, 47}, {18, SHIFT, 64}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 13}, {5, SHIFT, 47}, },
			{{-1, REDUCE, 5}, {0, SHIFT, 30}, {5, SHIFT, 31}, {21, SHIFT, 32}, },
			{{-1, ERROR, 51}, {1, SHIFT, 66}, },
			{{-1, ERROR, 52}, {0, SHIFT, 30}, {21, SHIFT, 32}, },
			{{-1, ERROR, 53}, {0, SHIFT, 30}, {21, SHIFT, 32}, },
			{{-1, ERROR, 54}, {0, SHIFT, 30}, {21, SHIFT, 32}, },
			{{-1, ERROR, 55}, {0, SHIFT, 30}, {21, SHIFT, 32}, },
			{{-1, ERROR, 56}, {0, SHIFT, 30}, {21, SHIFT, 32}, },
			{{-1, ERROR, 57}, {0, SHIFT, 30}, {21, SHIFT, 32}, },
			{{-1, ERROR, 58}, {0, SHIFT, 30}, {21, SHIFT, 32}, },
			{{-1, ERROR, 59}, {0, SHIFT, 30}, {21, SHIFT, 32}, },
			{{-1, ERROR, 60}, {0, SHIFT, 30}, {21, SHIFT, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 64}, {0, SHIFT, 76}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 76}, {5, SHIFT, 77}, },
			{{-1, ERROR, 77}, {19, SHIFT, 80}, {20, SHIFT, 81}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 79}, {1, SHIFT, 82}, {5, SHIFT, 77}, },
			{{-1, ERROR, 80}, {0, SHIFT, 30}, {21, SHIFT, 32}, },
			{{-1, ERROR, 81}, {0, SHIFT, 30}, {21, SHIFT, 32}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, {4, 17}, },
			{{-1, 45}, {46, 63}, },
			{{-1, 48}, {49, 65}, },
			{{-1, 78}, {79, 83}, },
			{{-1, 33}, {30, 51}, {35, 61}, {36, 61}, {37, 61}, {38, 61}, {39, 61}, {40, 61}, {41, 61}, {42, 61}, {43, 61}, {44, 62}, {50, 61}, },
			{{-1, 34}, {52, 67}, {53, 68}, {54, 69}, {55, 70}, {56, 71}, {57, 72}, {58, 73}, {59, 74}, {60, 75}, {80, 84}, {81, 85}, },
			{{-1, 4}, },
			{{-1, 35}, {19, 36}, {20, 37}, {21, 38}, {22, 39}, {23, 40}, {24, 41}, {25, 42}, {26, 43}, {29, 50}, },
			{{-1, 46}, },
			{{-1, 49}, },
			{{-1, 79}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: '[', EOF",
			"expecting: 'author', 'title', 'date', 'image', 'link', 'bold', 'italic', 'email', 'paragraph', 'list', 'table', 'H1'",
			"expecting: EOF",
			"expecting: ']'",
			"expecting: '(', '~', plain text",
			"expecting: '-'",
			"expecting: '~'",
			"expecting: 'author', 'title', 'date', 'image', 'link', 'bold', 'italic', 'email', 'H1'",
			"expecting: '(', ')', '[', '-', '~', plain text, EOF",
			"expecting: '(', '[', '~', plain text, EOF",
			"expecting: '[', '-', EOF",
			"expecting: 'row'",
			"expecting: '[', '~', EOF",
			"expecting: ')'",
			"expecting: '(', plain text",
			"expecting: '('",
			"expecting: 'data', 'header'",
			"expecting: ')', '~'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 6, 4, 4, 7, 8, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 10, 10, 11, 12, 12, 9, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 10, 10, 15, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 16, 17, 17, 14, 14, 12, 17, 17, 17, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
